:properties:
:id: 341DBB81-FE17-7064-5BC3-9A139E1FF48F
:end:
#+title: Features
#+author: Marco Craveiro
#+options: <:nil c:nil todo:nil ^:nil d:nil date:nil author:nil toc:nil html-postamble:nil

Key features.

* Preamble

#+begin_src emacs-lisp
;;; features.el --- Cunene: My emacs configuration Copyright Â© 2021 Marco Craveiro
;; Author: Marco Craveiro <marco_craveiro@gmail.com> URL:
;; https://github.com/mcraveiro/prelude Version: 0.0.3 Keywords: convenience

;; This file is not part of GNU Emacs.

;;; Commentary:

;; General editor configuration

;;; License:

;; This program is free software; you can redistribute it and/or
;; modify it under the terms of the GNU General Public License
;; as published by the Free Software Foundation; either version 3
;; of the License, or (at your option) any later version.
;;
;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.
;;
;; You should have received a copy of the GNU General Public License
;; along with GNU Emacs; see the file COPYING.  If not, write to the
;; Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
;; Boston, MA 02110-1301, USA.

;;; Code:
#+end_src

* Regular Expressions

| =reb= | Built-in |

Setup REB.

Links:

- [[https://www.masteringemacs.org/article/re-builder-interactive-regexp-builder][re-builder: the Interactive regexp builder]]

#+begin_src emacs-lisp
(require 're-builder)
(setq reb-re-syntax 'string)        ;; No need for double-slashes
#+end_src

Use REB with query replace regex.

Links:

- [[https://www.reddit.com/r/emacs/comments/mxqm4u/how_to_combine_the_power_of_rebuilder_with/gvsbbid/][How to combine the power of re-builder with query-replace-regexp?]]

#+begin_src emacs-lisp
(defun cunene/reb-replace-regexp (&optional delimited)
  "Run `query-replace-regexp' with the contents of `re-builder'.

With non-nil optional argument DELIMITED, only replace matches
surrounded by word boundaries."
  (interactive "P")
  (reb-update-regexp)
  (let* ((re (reb-target-binding reb-regexp))
     (re-printed (with-output-to-string (print re)))
     (replacement (read-from-minibuffer
               (format "Replace regexp %s with: "
                   (substring re-printed 1
                      (1- (length re-printed)))))))
    (with-current-buffer reb-target-buffer
      (query-replace-regexp re replacement delimited))))

(define-key reb-mode-map (kbd "C-M-%") 'cunene/reb-replace-regexp)
#+end_src

* Dired

#+begin_src emacs-lisp
;; Dired switches
(setq dired-listing-switches "-lGh1v --group-directories-first")
(setq-default list-directory-brief-switches "-CF")

(add-hook
 'dired-before-readin-hook
 #'(lambda ()
    (when (file-remote-p default-directory)
      (setq dired-actual-switches "-l"))))

;; always delete and copy recursively
(require 'dired)
(setq dired-recursive-deletes 'always)
(setq dired-recursive-copies 'always)

;; if there is a dired buffer displayed in the next window, use its
;; current subdir, instead of the current subdir of this dired buffer
(setq dired-dwim-target t)

;; enable some really cool extensions like C-x C-j(dired-jump)
(require 'dired-x)
#+end_src

* IBuffer

#+begin_src emacs-lisp
(use-package ibuffer
  :bind
  (:map ibuffer-mode-map
        ("/ e" . ibuffer-filter-by-ede-project)
        ("% e" . ibuffer-mark-by-ede-project-regexp)
        ("s e" . ibuffer-do-sort-by-ede-project))
  :config
  (progn
    (global-set-key (kbd "<f5>") 'ibuffer) ;; Shortcut for ibuffer
    (when (display-graphic-p) ;; Display buffer icons on GUI
      (define-ibuffer-column icon (:name " ")
        (let ((icon (if (and buffer-file-name
                             (all-the-icons-match-to-alist buffer-file-name
                                                           all-the-icons-regexp-icon-alist))
                        (all-the-icons-icon-for-file (file-name-nondirectory buffer-file-name)
                                                     :height 0.9 :v-adjust -0.05)
                      (all-the-icons-icon-for-mode major-mode :height 0.9 :v-adjust -0.05))))
          (if (symbolp icon)
              (setq icon (all-the-icons-faicon "file-o" :face 'all-the-icons-dsilver :height 0.9 :v-adjust -0.05))
            icon))))
    (add-hook 'ibuffer-mode-hook ;; Setup filter groups
              #'(lambda ()
                 (ibuffer-auto-mode 1)
                 (ibuffer-switch-to-saved-filter-groups "home")
                 (ibuffer-do-sort-by-filename/process))))

  (setq ibuffer-formats '((mark modified read-only locked
                                " " (icon 2 2 :left :elide) (name 18 18 :left :elide)
                                " " (size 9 -1 :right)
                                " " (mode 16 16 :left :elide) " " filename-and-process)
                          (mark " " (name 16 -1) " " filename)))
  (setq ibuffer-filter-group-name-face '(:inherit (font-lock-string-face bold)))
  (setq ibuffer-show-empty-filter-groups nil) ;; Remove empty groups
  (setq ibuffer-expert t) ;; Enable expert mode
  (setq ibuffer-saved-filter-groups ;; Group buffers
        (quote (("home"
                 ("c++" (mode . c++-mode))
                 ("python" (or
                            (mode . python-mode)
                            (name . "^\\*Python\\*$")))
                 ("fsharp" (or
                            (mode . inferior-fsharp-mode)
                            (mode . fsharp-mode)))
                 ("csharp" (mode . csharp-mode))
                 ("java" (mode . java-mode))
                 ("kotlin" (mode . kotlin-mode))
                 ("ruby" (mode . ruby-mode))
                 ("perl" (mode . perl-mode))
                 ("json" (mode . json-mode))
                 ("javascript" (or
                                (mode . javascript-mode)
                                (mode . js2-mode)
                                (mode . js-mode)))
                 ("php" (mode . php-mode))
                 ("prodigy" (name . "^\\*prodigy"))
                 ("mongo" (mode . inf-mongo-mode))
                 ("org" (or
                         (name . "^\\*Org Agenda")
                         (mode . org-mode)))
                 ("xml" (mode . nxml-mode))
                 ("sql" (or
                         (mode . sql-mode)
                         (name . "^\\*SQL")))
                 ("make" (or
                          (mode . cmake-mode)
                          (mode . makefile-mode)
                          (mode . makefile-gmake-mode)))
                 ("t4" (name . ".tt$"))
                 ("Dogen - Stitch" (or
                                    (mode . headtail-mode)
                                    (name . ".stitch$")))
                 ("bash" (mode . sh-mode))
                 ("awk" (mode . awk-mode))
                 ("latex" (or
                           (name . ".tex$")
                           (name . ".texi$")
                           (mode . tex-mode)
                           (mode . latex-mode)))
                 ("markdown" (or
                              (mode . markdown-mode)
                              (mode . gfm-mode)))
                 ("emacs-lisp" (or
                                (mode . emacs-lisp-mode)
                                (name . "^\\*Compile-Log\\*$")))
                 ("powershell" (or
                                (mode . powershell-mode)
                                (name . "^\\*PowerShell")))
                 ("logs" (or
                          (mode . log4j-mode)
                          (mode . logview-mode)))
                 ("grep" (or
                          (name . "^\\*Occur\\*$")
                          (name . "^\\*Moccur\\*$")
                          (mode . grep-mode)))
                 ("irc" (or
                         (mode . erc-list-mode)
                         (mode . erc-mode)))
                 ("shell" (or
                           (name . "^\\*Shell Command Output\\*$")
                           (mode . shell-mode)
                           (mode . ssh-mode)
                           (mode . eshell-mode)
                           (name . "^\\*compilation\\*$")))
                 ("file management" (or
                                     (mode . dired-mode)
                                     (mode . tar-mode)))
                 ("org" (mode . org-mode-))
                 ("text files" (or
                                (mode . conf-unix-mode)
                                (mode . conf-space-mode)
                                (mode . text-mode)))
                 ("yaml" (mode . yaml-mode))
                 ("msdos" (mode . dos-mode))
                 ("patches" (or
                             (name . "^\\*Assoc file dif")
                             (mode . diff-mode)))
                 ("version control" (or
                                     (name . "^\\*svn-")
                                     (name . "^\\*vc")
                                     (name . "^\\*cvs")
                                     (name . "^\\magit")))
                 ("snippets" (mode . snippet-mode))
                 ("semantic" (or
                              (mode . data-debug-mode)
                              (name . "^\\*Parser Output\\*$")
                              (name . "^\\*Lexer Output\\*$")))
                 ("web browsing" (or
                                  (mode . w3m-mode)
                                  (mode . verb-mode)
                                  (name . "^\\*Verb")
                                  (mode . twittering-mode)))
                 ("music" (or
                           (mode . bongo-playlist-mode)
                           (mode . bongo-library-mode)))
                 ("mail" (or
                          (mode . gnus-group-mode)
                          (mode . gnus-summary-mode)
                          (mode . gnus-article-mode)
                          (name . "^\\*imap log\\*$")
                          (name . "^\\*gnus trace\\*$")
                          (name . "^\\*nnimap imap.")))
                 ("web development" (or
                                     (mode . html-mode)
                                     (mode . css-mode)))
                 ("documentation" (or
                                   (mode . Info-mode)
                                   (mode . apropos-mode)
                                   (mode . woman-mode)
                                   (mode . helpful-mode)
                                   (mode . help-mode)
                                   (mode . Man-mode)))
                 ("lsp" (or
                          (name . "^\\*clangd")
                          (name . "^\\*company-")
                          (name . "^\\*omnisharp")
                          (name . "^\\*lsp")))
                 ("system" (or
                            (name . "^\\*Packages\\*$")
                            (name . "^\\*helm M-x\\*$")
                            (name . "^\\*helm mini\\*$")
                            (name . "^\\*helm projectile\\*$")
                            (name . "^\\*RTags Log\\*$")
                            (name . "^\\**RTags Diagnostics\\*$")
                            (name . "^\\*tramp")
                            (name . "^\\**input/output of")
                            (name . "^\\**threads of")
                            (name . "^\\**breakpoints of")
                            (name . "^\\**Flycheck")
                            (name . "^\\**sx-search-result*")
                            (name . "^\\**gud-dogen.knit")
                            (name . "^\\**Warnings*")
                            (name . "^\\*debug tramp")
                            (name . "^\\*Proced log\\*$")
                            (name . "^\\*Ediff Registry\\*$")
                            (name . "^\\*Bookmark List\\*$")
                            (name . "^\\*RE-Builder\\*$")
                            (name . "^\\*Kill Ring\\*$")
                            (name . "^\\*Calendar\\*$")
                            (name . "^\\*icalendar-errors\\*$")
                            (name . "^\\*Proced\\*$")
                            (name . "^\\*WoMan-Log\\*$")
                            (name . "^\\*Apropos\\*$")
                            (name . "^\\*Completions\\*$")
                            (name . "^\\*Help\\*$")
                            (name . "^\\*helpful")
                            (name . "^\\*Dired log\\*$")
                            (name . "^\\*scratch\\*$")
                            (name . "^\\*gnuplot\\*$")
                            (name . "^\\*Flycheck errors\\*$")
                            (name . "^\\*compdb:")
                            (name . "^\\*Backtrace\\*$")
                            (name . "^\\*dashboard\\*$")
                            (name . "^\\*Messages\\*$")))
                 ("Treemacs" (or
                              (name . "^Treemacs Update")
                              (name . "^\\*nnimap imap.")))
                 )))))
#+end_src

** Buffers and Windows

| =desktop=   | Built-in                                 |
| =shackle=   | https://github.com/wasamasa/shackle      |
| =windswap=  | https://github.com/purcell/windswap      |
| =windmove=  | Built-in                                 |
| =winner=    | Built-in                                 |
| =framemove= | https://github.com/emacsmirror/framemove |

Bind keys to manage windows and buffers that are more popular.

#+begin_src emacs-lisp
(global-set-key (kbd "s-w") #'delete-window)
(global-set-key (kbd "s-W") #'kill-this-buffer)
#+end_src

Save and restore Emacs status, including buffers, point and window
configurations.

#+begin_src emacs-lisp
;; could not get it to work via use-package; commands did not kick-in
;; and kept trying to reload from elpa.
(require 'desktop)
(desktop-save-mode 1)
(setq history-length 250
      desktop-base-file-name (cunene/cache-concat "desktop/desktop")
      desktop-base-lock-name (cunene/cache-concat "desktop/desktop.lock")
      desktop-restore-eager 4
      desktop-restore-forces-onscreen nil
      desktop-restore-frames t)

(setq desktop-globals-to-save
      (append '((extended-command-history . 30)
                (file-name-history        . 100)
                (grep-history             . 30)
                (compile-history          . 30)
                (minibuffer-history       . 50)
                (query-replace-history    . 60)
                (read-expression-history  . 60)
                (regexp-history           . 60)
                (regexp-search-ring       . 20)
                (search-ring              . 20)
                (kill-ring                . 20)
                (shell-command-history    . 50)
                register-alist)))

;; run a desktop save periodically.
(run-with-timer 300 300
                (lambda () (desktop-save-in-desktop-dir)
                  (savehist-save)
                  (message nil)) ; clear the "Desktop saved in..." message
)

(defun cunene/emacs-process-p (pid)
  "If pid is the process ID of an emacs process, return t, else nil.
Also returns nil if pid is nil."
  (when pid
    (let ((attributes (process-attributes pid)) (cmd))
      (dolist (attr attributes)
        (if (string= "comm" (car attr))
            (setq cmd (cdr attr))))
      (if (and cmd (or (string= "emacs" cmd) (string= "emacs.exe" cmd))) t))))

(defadvice desktop-owner (after pry-from-cold-dead-hands activate)
  "Don't allow dead emacsen to own the desktop file."
  (when (not (cunene/emacs-process-p ad-return-value))
    (setq ad-return-value nil)))

(use-package windswap
  :demand
  :bind
  (("<f6> <down>" . windswap-down)
   ("<f6> <up>" . windswap-up)
   ("<f6> <left>" . windswap-left)
   ("<f6> <right>" . windswap-right)))
#+end_src

Window management.

#+begin_quote
=shackle= gives you the means to put an end to popped up buffers not behaving
they way you'd like them to. By setting up simple rules you can for instance
make Emacs always select help buffers for you or make everything reuse your
currently selected window.

--- Vasilij Schneidermann
#+end_quote

#+begin_src emacs-lisp
;; Enforce rules for popups
;; (use-package shackle
;;   :hook (after-init . shackle-mode)
;;   :init
;;   (setq shackle-default-size 0.4
;;         shackle-default-alignment 'below
;;         shackle-default-rule nil
;;         shackle-select-reused-windows t
;;         shackle-rules
;;         '((("*Help*" "*Apropos*") :select t :size 0.3 :align 'below :autoclose t)
;;           (compilation-mode :select t :size 0.3 :align 'below :autoclose t)
;;           (comint-mode :select t :size 0.4 :align 'below :autoclose t)
;;           ("*Completions*" :size 0.3 :align 'below :autoclose t)
;;           ("*Pp Eval Output*" :size 15 :align 'below :autoclose t)
;;           ("*Backtrace*" :select t :size 15 :align 'below)
;;           (("*Warnings*" "*Messages*") :size 0.3 :align 'below :autoclose t)
;;           ("^\\*.*Shell Command.*\\*$" :regexp t :size 0.3 :align 'below :autoclose t)
;;           ("\\*[Wo]*Man.*\\*" :regexp t :select t :align 'below :autoclose t)
;;           ("*Calendar*" :select t :size 0.3 :align 'below)
;;           (("*shell*" "*eshell*" "*ielm*") :popup t :size 0.3 :align 'below)
;;           ("^\\*vc-.*\\*$" :regexp t :size 0.3 :align 'below :autoclose t)
;;           ("*gud-debug*" :select t :size 0.4 :align 'below :autoclose t)
;;           ("\\*ivy-occur .*\\*" :regexp t :select t :size 0.3 :align 'below)
;;           (" *undo-tree*" :select t)
;;           ("*quickrun*" :select t :size 15 :align 'below)
;;           ("*tldr*" :size 0.4 :align 'below :autoclose t)
;;           ("*Finder*" :select t :size 0.3 :align 'below :autoclose t)
;;           ("^\\*macro expansion\\**" :regexp t :size 0.4 :align 'below)
;;           ("^\\*elfeed-entry" :regexp t :size 0.7 :align 'below :autoclose t)
;;           (" *Install vterm* " :size 0.35 :same t :align 'below)
;;           (("*Paradox Report*" "*package update results*") :size 0.2 :align 'below :autoclose t)
;;           ("*Package-Lint*" :size 0.4 :align 'below :autoclose t)
;;           ("*How Do You*" :select t :size 0.5 :align 'below :autoclose t)

;;           ((youdao-dictionary-mode osx-dictionary-mode fanyi-mode) :select t :size 0.5 :align 'below :autoclose t)

;;           (("*Org Agenda*" " *Agenda Commands*" " *Org todo*" "*Org Dashboard*" "*Org Select*")
;;            :select t :size 0.1 :align 'below :autoclose t)
;;           (("\\*Capture\\*" "^CAPTURE-.*\\.org*") :regexp t :select t :size 0.3 :align 'below :autoclose t)

;;           ("*ert*" :size 15 :align 'below :autoclose t)
;;           (overseer-buffer-mode :size 15 :align 'below :autoclose t)

;;           (" *Flycheck checkers*" :select t :size 0.3 :align 'below :autoclose t)
;;           ((flycheck-error-list-mode flymake-diagnostics-buffer-mode)
;;            :select t :size 0.25 :align 'below :autoclose t)

;;           (("*lsp-help*" "*lsp session*") :size 0.3 :align 'below :autoclose t)
;;           ("*DAP Templates*" :select t :size 0.4 :align 'below :autoclose t)
;;           (dap-server-log-mode :size 15 :align 'below :autoclose t)
;;           ("*rustfmt*" :select t :size 0.3 :align 'below :autoclose t)
;;           ((rustic-compilation-mode rustic-cargo-clippy-mode rustic-cargo-outdated-mode rustic-cargo-test-mode)
;;            :select t :size 0.3 :align 'below :autoclose t)

;;           (profiler-report-mode :select t :size 0.5 :align 'below)
;;           ("*ELP Profiling Restuls*" :select t :size 0.5 :align 'below)

;;           ((inferior-python-mode inf-ruby-mode swift-repl-mode) :size 0.4 :align 'below)
;;           ("*prolog*" :size 0.4 :align 'below)

;;           (("*Gofmt Errors*" "*Go Test*") :select t :size 0.3 :align 'below :autoclose t)
;;           (godoc-mode :select t :size 0.4 :align 'below :autoclose t)

;;           ((grep-mode occur-mode rg-mode deadgrep-mode ag-mode pt-mode) :select t :size 0.4 :align 'below)
;;           (Buffer-menu-mode :select t :size 0.5 :align 'below :autoclose t)
;;           (gnus-article-mode :select t :size 0.7 :align 'below :autoclose t)
;;           (helpful-mode :select t :size 0.3 :align 'below :autoclose t)
;;           (devdocs-mode :select t :size 0.4 :align 'below :autoclose t)
;;           ((process-menu-mode list-environment-mode cargo-process-mode) :select t :size 0.3 :align 'below)
;;           (("*docker-containers*" "*docker-images*" "*docker-networks*" "*docker-volumes*")
;;            :size 0.4 :align 'below :autoclose t)
;;           (bookmark-bmenu-mode :select t :size 0.4 :align 'below)
;;           (tabulated-list-mode :size 0.4 :align 'below :autclose t)))
;;   :config
;;   (with-no-warnings
;;     (defvar shackle--popup-window-list nil
;;       "All popup windows.")
;;     (defvar-local shackle--current-popup-window nil
;;       "Current popup window.")
;;     (put 'shackle--current-popup-window 'permanent-local t)

;;     (defun cunene/shackle-last-popup-buffer ()
;;       "View last popup buffer."
;;       (interactive)
;;       (ignore-errors
;;         (display-buffer shackle-last-buffer)))
;;     (bind-key "C-h z" #'cunene/shackle-last-popup-buffer)

;;     ;; Add keyword: `autoclose'
;;     (defun cunene/shackle-display-buffer-hack (fn buffer alist plist)
;;       (let ((window (funcall fn buffer alist plist)))
;;         (setq shackle--current-popup-window window)

;;         (when (plist-get plist :autoclose)
;;           (push (cons window buffer) shackle--popup-window-list))
;;         window))
;;     (advice-add #'shackle-display-buffer :around #'cunene/shackle-display-buffer-hack)

;;     (defun cunene/shackle-close-popup-window-hack (&rest _)
;;       "Close current popup window via `C-g'."
;;       (setq shackle--popup-window-list
;;             (cl-loop for (window . buffer) in shackle--popup-window-list
;;                      if (and (window-live-p window)
;;                              (equal (window-buffer window) buffer))
;;                      collect (cons window buffer)))
;;       ;; `C-g' can deactivate region
;;       (when (and (called-interactively-p 'interactive)
;;                  (not (region-active-p)))
;;         (if (one-window-p)
;;             (let ((window (selected-window)))
;;               (when (equal (buffer-local-value 'shackle--current-popup-window
;;                                                (window-buffer window))
;;                            window)
;;                 (winner-undo)))
;;           (let* ((window (caar shackle--popup-window-list))
;;                  (buffer (cdar shackle--popup-window-list))
;;                  (process (get-buffer-process buffer)))
;;             (when (and (window-live-p window)
;;                        (equal (window-buffer window) buffer))
;;               (when (process-live-p process)
;;                 (kill-process process))
;;               (delete-window window)
;;               (pop shackle--popup-window-list))))))

;;     (advice-add #'keyboard-quit :before #'cunene/shackle-close-popup-window-hack)

;;     ;; Compatible with org
;;     (advice-add #'org-switch-to-buffer-other-window
;;                 :override #'switch-to-buffer-other-window)))
#+end_src

Bind shorthands to move between windows.

#+begin_src emacs-lisp
(use-package windmove
  :ensure nil
  :bind
  (
   ("<f2> <left>" . windmove-left)
   ("<f2> <down>" . windmove-down)
   ("<f2> <up>" . windmove-up)
   ("<f2> <right>" . windmove-right)))

;; (require 'framemove)
;; (setq framemove-hook-into-windmove t)
#+end_src

Allow undo's and redo's with window configurations.

#+begin_quote
Winner mode is a global minor mode that records the changes in the window
configuration (i.e. how the frames are partitioned into windows) so that the
changes can be "undone" using the command =winner-undo=.

--- Ivar Rummelhoff
#+end_quote

#+begin_src emacs-lisp
(use-package winner
  :ensure nil
  :hook
  (after-init . winner-mode))
#+end_src

** Org

| =org=         | Built-in                               |
| =org-present= | https://github.com/rlister/org-present |
| =ox-tufte=    | https://github.com/dakrone/ox-tufte    |

This very file is organized with =org-mode=. Like Markdown, but with
superpowers.

#+begin_quote
Org mode is for keeping notes, maintaining TODO lists, planning projects, and
authoring documents with a fast and effective plain-text system.

--- Carsten Dominik
#+end_quote

#+begin_src emacs-lisp
(use-package org
  :ensure nil
  :bind
  (("C-c A" . org-agenda)
   ("C-c B" . org-switchb)
   ("C-c c" . org-capture)
   ("C-c l" . org-store-link))
  :hook
  (org-mode . auto-fill-mode)
  :config
  (setq org-startup-folded t)
  (setq org-adapt-indentation nil)
  (setq org-confirm-babel-evaluate nil)
  (setq org-cycle-separator-lines 0)
  (setq org-hide-leading-stars t)
  (setq org-highlight-latex-and-related '(latex))
  (setq org-descriptive-links t)
  (setq org-edit-src-content-indentation 0)
  (setq org-edit-src-persistent-message nil)
  (setq org-fontify-done-headline t)
  (setq org-fontify-quote-and-verse-blocks t)
  (setq org-fontify-whole-heading-line t)
  (setq org-return-follows-link t)
  (setq org-src-tab-acts-natively t)
  (setq org-src-window-setup 'current-window)
  (setq org-startup-truncated nil)
  (setq org-support-shift-select 'always)
  (setq org-adapt-indentation 'headline-data)
  (setq org-duration-format (quote h:mm))
  (setq org-fold-core-style 'overlays) ;; https://github.com/org-roam/org-roam/pull/2236
  (require 'ob-shell)
  (require 'org-indent)
  (add-to-list 'org-babel-load-languages '(shell . t))
  (modify-syntax-entry ?' "'" org-mode-syntax-table)
  (advice-add 'org-src--construct-edit-buffer-name :override #'cunene/org-src-buffer-name))

;; too slow on large files.
;; (use-package org-superstar
;;   :ensure t
;;   :hook (org-mode . org-superstar-mode))

;; (use-package org-sidebar
;;   :ensure t)

(use-package org-fancy-priorities
  :diminish
  :ensure t
  :hook (org-mode . org-fancy-priorities-mode)
  :config
  (setq org-fancy-priorities-list '("ð°" "ð±" "ð²" "ð³" "ð´")))

(use-package hl-todo
  :ensure t
  :bind (:map hl-todo-mode-map
              ("C-c o" . hl-todo-occur))
  :hook ((prog-mode org-mode) . cunene/hl-todo-init)
  :init
  (defun cunene/hl-todo-init ()
    (setq-local hl-todo-keyword-faces '(("TODO" . "#ff9977")
                                        ("DOING" . "#FF00BC")
                                        ("DONE" . "#44bc44")
                                        ("BLOCKED" . "#003366")
                                        ("FIXME"  . "#FF0000")
                                        ("DEBUG"  . "#A020F0")
                                        ("GOTCHA" . "#FF4500")
                                        ("STUB"   . "#1E90FF")
                                         ))
    (hl-todo-mode)))

;; (use-package org-ref
;;   :ensure t
;;   :config
;;   (define-key org-ref-cite-keymap (kbd "C-<left>") nil)
;;   (define-key org-ref-cite-keymap (kbd "C-<right>") nil)
;;   :after org)

(use-package citeproc)
(use-package citeproc-org :after org)
(use-package org-present :after org)
(use-package org-roam :after org)
(use-package org-roam-ui :after org-roam)

(defun cunene/occur-non-ascii ()
  "Find any non-ascii characters in the current buffer."
  (interactive)
  (occur "[^[:ascii:]]"))

;; export glossaries and acronyms.
(add-hook 'org-export-before-parsing-hook 'org-ref-acronyms-before-parsing)
(add-hook 'org-export-before-parsing-hook 'org-ref-glossary-before-parsing)

(setq org-latex-pdf-process
      '("latexmk -shell-escape -bibtex -pdf %f"))
(setq org-latex-listings t)
(setq bibtex-dialect 'biblatex)
(add-to-list 'org-latex-packages-alist '("" "listings"))
(add-to-list 'org-latex-packages-alist '("" "color"))
(setq org-highlight-latex-and-related nil)

;; add classic thesis
(add-to-list 'org-latex-classes
             '("scrreprt" "\\documentclass[11pt]{scrreprt}"
               ("\\part{%s}" . "\\part*{%s}")
               ("\\chapter{%s}" . "\\chapter*{%s}")
               ("\\section{%s}" . "\\section*{%s}")
               ("\\subsection{%s}" . "\\subsection*{%s}")
               ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
               ("\\paragraph{%s}" . "\\paragraph*{%s}")
               ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
#+end_src

#+begin_src emacs-lisp
(defun cunene/org-cycle-parent (argument)
  "Go to the nearest parent heading and execute `org-cycle'.
ARGUMENT determines the visible heading."
  (interactive "p")
  (if (org-at-heading-p)
      (outline-up-heading argument)
    (org-previous-visible-heading argument))
  (org-cycle))

(defun cunene/org-show-next-heading-tidily ()
  "Show next entry, keeping other entries closed."
  (interactive)
  (if (save-excursion (end-of-line) (outline-invisible-p))
      (progn (org-show-entry) (outline-show-children))
    (outline-next-heading)
    (unless (and (bolp) (org-at-heading-p))
      (org-up-heading-safe)
      (outline-hide-subtree)
      (user-error "Boundary reached"))
    (org-overview)
    (org-reveal t)
    (org-show-entry)
    (outline-show-children)))

(defun cunene/org-show-previous-heading-tidily ()
  "Show previous entry, keeping other entries closed."
  (interactive)
  (let ((pos (point)))
    (outline-previous-heading)
    (unless (and (< (point) pos) (bolp) (org-at-heading-p))
      (goto-char pos)
      (outline-hide-subtree)
      (user-error "Boundary reached"))
    (org-overview)
    (org-reveal t)
    (org-show-entry)
    (outline-show-children)))

(defun cunene/org-src-buffer-name (name &rest _)
  "Simple buffer name.
!NAME is the name of the buffer."
  (format "*%s*" name))

(use-package org-agenda
  :ensure nil
  :bind ("C-c a" . org-agenda)
  :config
  (setq org-agenda-files (directory-files-recursively "~/Documents/org/" "\\.org$"))
  ;; (setq org-agenda-files '(
  ;;                          "~/Documents/org/work.org"
  ;;                          "~/Documents/org/reminder.org"
  ;;                         ))
  (setq org-agenda-start-with-log-mode t)
  (setq org-agenda-prefix-format
        '((agenda . " %i %-24:c%?-16t%-10e% s")
          (todo   . " %i %-24:c %-10e")
          (tags   . " %i %-24:c")
          (search . " %i %-24:c")))

  ;;https://www.philnewton.net/blog/how-i-get-work-done-with-emacs/
  (setq org-agenda-custom-commands
        '(("d" "Today's Tasks"
           ((agenda "" ((org-agenda-span 1)
                        (org-agenda-overriding-header "Today's Tasks")))))))
  ;; Formatting of time stamps in clock table.
  (setq org-time-clocksum-format
	(quote
	 (:hours "%d" :require-hours t :minutes ":%02d" :require-minutes t)))
  (setq org-duration-format (quote h:mm)))
#+end_src

* Treemacs

Issues:

- [[https://github.com/Alexander-Miller/treemacs/issues/846][#846: treemacs dired: unwanted indentation for directories]]

#+begin_src emacs-lisp
(use-package treemacs
  :defer t
  :init
  (with-eval-after-load 'winum
    (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
  :config
  (progn
    (setq treemacs-collapse-dirs                   (if treemacs-python-executable 3 0)
          treemacs-deferred-git-apply-delay        0.5
          treemacs-directory-name-transformer      #'identity
          treemacs-display-in-side-window          t
          treemacs-eldoc-display                   t
          treemacs-file-event-delay                5000
          treemacs-file-extension-regex            treemacs-last-period-regex-value
          treemacs-file-follow-delay               0.5
          treemacs-file-name-transformer           #'identity
          treemacs-follow-after-init               t
          treemacs-expand-after-init               t
          treemacs-git-command-pipe                ""
          treemacs-goto-tag-strategy               'refetch-index
          treemacs-indentation                     2
          treemacs-indentation-string              " "
          treemacs-is-never-other-window           nil
          treemacs-max-git-entries                 5000
          treemacs-missing-project-action          'ask
          treemacs-move-forward-on-expand          nil
          treemacs-no-png-images                   nil
          treemacs-no-delete-other-windows         t
          treemacs-project-follow-cleanup          nil
          treemacs-persist-file                    (cunene/cache-concat"treemacs/treemacs-persist")
          treemacs-position                        'left
          treemacs-read-string-input               'from-child-frame
          treemacs-recenter-distance               0.1
          treemacs-recenter-after-file-follow      t
          treemacs-recenter-after-tag-follow       nil
          treemacs-recenter-after-project-jump     'always
          treemacs-recenter-after-project-expand   'on-distance
          treemacs-litter-directories              '("/node_modules" "/.venv" "/.cask")
          treemacs-show-cursor                     nil
          treemacs-show-hidden-files               t
          treemacs-silent-filewatch                nil
          treemacs-silent-refresh                  nil
          treemacs-sorting                         'alphabetic-asc
          treemacs-select-when-already-in-treemacs 'move-back
          treemacs-space-between-root-nodes        t
          treemacs-tag-follow-cleanup              t
          treemacs-tag-follow-delay                1.5
          treemacs-user-mode-line-format           nil
          treemacs-user-header-line-format         nil
          treemacs-width                           45
          treemacs-width-is-initially-locked       t
          treemacs-text-scale                      -2
          treemacs-workspace-switch-cleanup        nil)

    ;; The default width and height of the icons is 22 pixels. If you are
    ;; using a Hi-DPI display, uncomment this to double the icon size.
    ;;(treemacs-resize-icons 44)

    (treemacs-follow-mode t)
    ;; (treemacs-tag-follow-mode nil)
    (treemacs-filewatch-mode t)
    (treemacs-fringe-indicator-mode 'always)

    (pcase (cons (not (null (executable-find "git")))
                 (not (null treemacs-python-executable)))
      (`(t . t)
       (treemacs-git-mode 'deferred))
      (`(t . _)
       (treemacs-git-mode 'simple)))

    (treemacs-hide-gitignored-files-mode nil))
  :bind
  (:map global-map
        ("M-0"       . treemacs-select-window)
        ("C-x t 1"   . treemacs-delete-other-windows)
        ("C-x t t"   . treemacs)
        ("C-x t B"   . treemacs-bookmark)
        ("C-x t C-t" . treemacs-find-file)
        ("C-x t M-t" . treemacs-find-tag)))

(use-package treemacs-evil
  :after (treemacs evil)
  :ensure t)

(use-package treemacs-projectile
  :after (treemacs projectile)
  :ensure t)

(use-package treemacs-icons-dired
  :after (treemacs dired)
  :ensure t
  :config (treemacs-icons-dired-mode))

(use-package treemacs-magit
  :after (treemacs magit)
  :ensure t)

(use-package treemacs-persp ;;treemacs-perspective if you use perspective.el vs. persp-mode
  :after (treemacs persp-mode) ;;or perspective vs. persp-mode
  :ensure t
  :config (treemacs-set-scope-type 'Perspectives))

(use-package treemacs-all-the-icons)
(treemacs-load-theme "all-the-icons")

(defun cunene/setup-tab-width-treemacs-dired (&rest _)
  "Set `tab-width' to 1, so tab characters don't ruin formatting."
  (setq tab-width 1))

(add-hook 'treemacs-mode-hook #'cunene/setup-tab-width-treemacs-dired)

(add-hook 'dired-mode-hook
          (lambda ()
            (setq-local tab-width 1)))
#+end_src

* Completion

#+begin_src emacs-lisp
(use-package vertico
  :init
  (vertico-mode)
  :config
  (setq vertico-resize t) ;; Grow and shrink the Vertico minibuffer
  (setq vertico-cycle t)) ;; enable cycling for `vertico-next' and `vertico-previous'.

;; from vendor directory.
(use-package vertico-quick
  :load-path cunene/vendor-packages
  :bind
  (:map vertico-map
        ("M-q" . vertico-quick-insert)
        ("C-q" . vertico-quick-exit)))

;; Use the `orderless' completion style. Additionally enable
;; `partial-completion' for file path expansion. `partial-completion' is
;; important for wildcard support. Multiple files can be opened at once
;; with `find-file' if you enter a wildcard. You may also give the
;; `initials' completion style a try.
(use-package orderless
  :config
  (setq
   completion-styles '(orderless)
   completion-category-defaults nil
   completion-category-overrides '((file (styles partial-completion)))))

;; A few more useful configurations...
(use-package emacs
  :init
  ;; Add prompt indicator to `completing-read-multiple'.
  ;; Alternatively try `consult-completing-read-multiple'.
  (defun cunene/crm-indicator (args)
    (cons (concat "[CRM] " (car args)) (cdr args)))
  (advice-add #'completing-read-multiple :filter-args #'cunene/crm-indicator)

  ;; Do not allow the cursor in the minibuffer prompt
  (setq minibuffer-prompt-properties
        '(read-only t cursor-intangible t face minibuffer-prompt))
  (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

  ;; Emacs 28: Hide commands in M-x which do not work in the current mode.
  ;; Vertico commands are hidden in normal buffers.
  (setq read-extended-command-predicate
        #'command-completion-default-include-p)

  ;; Enable recursive minibuffers
  (setq enable-recursive-minibuffers t))

;; Enable richer annotations using the Marginalia package
(use-package marginalia
  ;; Either bind `marginalia-cycle` globally or only in the minibuffer
  :bind (("M-A" . marginalia-cycle)
         :map minibuffer-local-map
         ("M-A" . marginalia-cycle))

  ;; The :init configuration is always executed (Not lazy!)
  :init

  ;; Must be in the :init section of use-package such that the mode gets
  ;; enabled right away. Note that this forces loading the package.
  (marginalia-mode))

;; Use `consult-completion-in-region' if Vertico is enabled.
;; Otherwise use the default `completion--in-region' function.
(setq completion-in-region-function
      (lambda (&rest args)
        (apply (if vertico-mode
                   #'consult-completion-in-region
                 #'completion--in-region)
               args)))

;; (use-package completing-read-xref
;;   :load-path cunene/vendor-packages
;;   :commands (completing-read-xref-show-xrefs completing-read-xref-show-xrefs)
;;   :init (setq xref-show-definitions-function 'completing-read-xref-show-defs))
#+end_src

Company

#+begin_src emacs-lisp
(use-package company
  :config (add-hook 'prog-mode-hook 'company-mode))

(use-package company-posframe
  :init (company-posframe-mode 1)
  :config
  (setq company-idle-delay 0.3
        company-show-numbers t
        company-tooltip-align-annotations t
        company-async-timeout 15
        company-minimum-prefix-length 2
        company-dabbrev-downcase nil
        company-dabbrev-other-buffers t
        company-auto-complete nil
        company-dabbrev-code-other-buffers 'all
        company-dabbrev-code-everywhere t
        company-dabbrev-code-ignore-case t
        company-minimum-prefix-length 1
        company-transformers nil
        company-lsp-async t
        company-lsp-cache-candidates nil)

  :diminish)

(use-package company-box
  :config (setq company-box-icons-alist 'company-box-icons-all-the-icons)
  :hook (company-mode . company-box-mode))
#+end_src

* Undo

| =undo-tree= | https://gitlab.com/tsc25/undo-tree |

#+begin_src emacs-lisp
(defvar cunene/undo-tree-directory
  (cunene/cache-concat "undo")
  "Location of the undo-tree save files.")

(use-package undo-tree
  :diminish undo-tree-mode
  :config
  (setq
   undo-tree-visualizer-diff nil ;; causes problems with other buffers
   undo-tree-visualizer-timestamps nil
   undo-tree-enable-undo-in-region t
   undo-tree-visualizer-relative-timestamps nil
   undo-tree-history-directory-alist `((".*" . ,cunene/undo-tree-directory))
   undo-tree-auto-save-history t) ;; autosave the undo-tree history
   (global-undo-tree-mode 1))

(add-to-list 'display-buffer-alist
             '("*undo-tree"
               (display-buffer-reuse-window display-buffer-in-side-window)
               (side . right)
               (window-width . 0.15)
               (reusable-frames . nil)))
#+end_src

* Bookmarks

| bm | https://github.com/joodland/bm |

For the org-mode support, see:

- [[https://github.com/joodland/bm/issues/35][#35: Integrating bm with org-mode: expanding tree on jump]]

#+begin_src emacs-lisp
(use-package bm
  :demand t
  :init
  ;; restore on load (even before you require bm)
  (setq bm-restore-repository-on-load t)

  :config
  ;; Allow cross-buffer 'next'
  (setq bm-cycle-all-buffers t)

  ;; where to store persistant files
  (setq bm-repository-file (cunene/cache-concat "bm/bm-repository"))

  ;; show bookmark in fringe only.
  (setq bm-highlight-style 'bm-highlight-only-fringe)

  ;; save bookmarks
  (setq-default bm-buffer-persistence t)

  ;; Loading the repository from file when on start up.
  (add-hook 'after-init-hook 'bm-repository-load)

  ;; Saving bookmarks
  (add-hook 'kill-buffer-hook #'bm-buffer-save)

  ;; Saving the repository to file when on exit.
  ;; kill-buffer-hook is not called when Emacs is killed, so we
  ;; must save all bookmarks first.
  (add-hook 'kill-emacs-hook #'(lambda nil
                                 (bm-buffer-save-all)
                                 (bm-repository-save)))

  ;; The `after-save-hook' is not necessary to use to achieve persistence,
  ;; but it makes the bookmark data in repository more in sync with the file
  ;; state.
  (add-hook 'after-save-hook #'bm-buffer-save)

  ;; Restoring bookmarks
  (add-hook 'find-file-hooks #'bm-buffer-restore)
  (add-hook 'after-revert-hook #'bm-buffer-restore)

  ;; The `after-revert-hook' is not necessary to use to achieve persistence,
  ;; but it makes the bookmark data in repository more in sync with the file
  ;; state. This hook might cause trouble when using packages
  ;; that automatically reverts the buffer (like vc after a check-in).
  ;; This can easily be avoided if the package provides a hook that is
  ;; called before the buffer is reverted (like `vc-before-checkin-hook').
  ;; Then new bookmarks can be saved before the buffer is reverted.
  ;; Make sure bookmarks is saved before check-in (and revert-buffer)
  (add-hook 'vc-before-checkin-hook #'bm-buffer-save)

  :bind (("<f9>" . bm-toggle)
         ("S-<f9>" . bm-previous)
         ("C-<f9>" . bm-next)))

(defvar cunene/bm-after-goto-hook nil
  "Hook run after jumping to a bookmark in `bm-goto'.")

(add-hook 'cunene/bm-after-goto-hook 'org-bookmark-jump-unhide)

(defun cunene/bm-goto (bookmark)
  "Goto specified BOOKMARK."
  (if (bm-bookmarkp bookmark)
      (progn
        (if bm-goto-position
            (goto-char (max
                        ;; sometimes marker-position is before start of overlay
                        ;; marker is not updated when overlay hooks are called.
                        (overlay-start bookmark)
                        (marker-position (overlay-get bookmark 'position))))
          (goto-char (overlay-start bookmark)))
        (run-hooks 'cunene/bm-after-goto-hook)
        (setq bm-wrapped nil)           ; turn off wrapped state
        (if bm-recenter
            (recenter))
        (let ((annotation (overlay-get bookmark 'annotation)))
          (if annotation
              (message annotation)))
        (when  (overlay-get bookmark 'temporary-bookmark)
          (bm-bookmark-remove  bookmark)))
    (when (> bm-verbosity-level 0)
      (message "Bookmark not found."))))

(setq
 bookmark-default-file (cunene/cache-concat "bookmarks/bookmarks")
 bookmark-save-flag 1)
#+end_src

* Highlighting

| =beacon=  | https://github.com/Malabarba/beacon                                     |
| =hi-lock= | https://www.masteringemacs.org/article/highlighting-by-word-line-regexp |
| =dimmer=  | https://github.com/gonewest818/dimmer.el                                |

#+begin_src emacs-lisp
;; Highlight current line.
(add-hook 'ibuffer-mode-hook #'hl-line-mode)
(add-hook 'bongo-mode-hook #'hl-line-mode)
(add-hook 'occur-mode-hook #'hl-line-mode)
(add-hook 'svn-status-mode-hook #'hl-line-mode)
(add-hook 'dired-mode-hook #'hl-line-mode)
(add-hook 'grep-setup-hook #'hl-line-mode)
(add-hook 'compilation-mode-hook #'hl-line-mode)
(add-hook 'magit-mode-hook #'hl-line-mode)
(add-hook 'vc-git-log-view-mode-hook #'hl-line-mode)
(add-hook 'logview-mode-hook #'hl-line-mode)
(add-hook 'find-dired-mode-hook #'hl-line-mode)
(add-hook 'gnus-summary-mode-hook #'hl-line-mode)
(add-hook 'org-agenda-finalize-hook #'hl-line-mode)
(add-hook 'org-agenda-finalize-hook #'hl-line-mode)

;; Turn on local highlighting for list-buffers
(defadvice list-buffers (after highlight-line activate)
  (save-excursion
    (set-buffer "*Buffer List*")
    (hl-line-mode)))

(use-package beacon :init (beacon-mode 1))
(require 'hi-lock)

(defun cunene/unhighlight-symbol-at-point ()
  "Remove highlight of symbol at point."
  (interactive)
  (unhighlight-regexp (concat "\\_<" (thing-at-point 'symbol) "\\_>")))

;; Key bindings
(global-set-key (kbd "S-<f12>") 'cunene/unhighlight-symbol-at-point)
(global-set-key (kbd "<f12>") 'highlight-symbol-at-point)
(global-set-key (kbd "C-<f12>") 'highlight-symbol-next)
(global-set-key (kbd "M-<f12>") 'highlight-symbol-prev)

(use-package dimmer
  :custom (dimmer-fraction 0.3)
  :config (dimmer-mode))
#+end_src

* Search

| =consult=           | https://github.com/minad/consult             |
| =consult-flycheck=  | https://github.com/minad/consult-flycheck    |
| =consult-dir=       | https://github.com/karthink/consult-dir      |
| =engine-mode=       | https://github.com/hrs/engine-mode           |
| =anzu=              | https://github.com/emacsorphanage/anzu       |
| =consult-yasnippet= | https://github.com/mohkale/consult-yasnippet |

#+begin_src emacs-lisp
(use-package consult
  :bind (("C-x r x" . consult-register)
         ("C-x r b" . consult-bookmark)
         ("C-c k" . consult-kmacro)
         ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complet-command
         ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
         ("C-x 5 b" . consult-buffer-other-frame)
         ("M-#" . consult-register-load)
         ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
         ("C-M-#" . consult-register)
         ("M-g o" . consult-outline)
         ("M-g h" . consult-org-heading)
         ("M-g a" . consult-org-agenda)
         ("M-g m" . consult-mark)
         ("C-x b" . consult-buffer)
         ("<help> a" . consult-apropos)            ;; orig. apropos-command
         ("M-g g" . consult-goto-line)           ;; orig. goto-line
         ("M-g o" . consult-outline)
         ("M-g m" . consult-mark)
         ("M-g k" . consult-global-mark)
         ("M-g i" . consult-imenu)
         ("M-g I" . consult-project-imenu)
         ("M-g e" . consult-error)
         ;; M-s bindings (search-map)
         ("M-s f" . consult-find)
         ("M-s L" . consult-locate)
         ("M-s g" . consult-grep)
         ("M-s G" . consult-git-grep)
         ("M-s r" . consult-ripgrep)
         ("M-s l" . consult-line)
         ("M-s m" . consult-multi-occur)
         ("M-s k" . consult-keep-lines)
         ("M-s u" . consult-focus-lines)
         ;; Isearch integration
         ("M-s e" . consult-isearch)
         ("M-g l" . consult-line)
         ("M-s m" . consult-multi-occur)
         ("C-x c o" . consult-multi-occur)
         ("C-x c SPC" . consult-mark)
         :map isearch-mode-map
         ("M-e" . consult-isearch)                 ;; orig. isearch-edit-string
         ("M-s e" . consult-isearch)               ;; orig. isearch-edit-string
         ("M-s l" . consult-line))
  :init
  (setq register-preview-delay 0
        register-preview-function #'consult-register-format)
  :config
  (setq consult-project-root-function #'projectile-project-root
        consult-narrow-key "<"))

(use-package consult-flycheck :after flycheck)

;; Consult directory navigation
(use-package consult-dir
  :bind (("C-x C-d" . consult-dir)
         :map vertico-map
         ("C-x C-d" . consult-dir)
         ("C-x C-j" . consult-dir-jump-file)))

(use-package consult-yasnippet)
(use-package engine-mode
  :config
  (engine-mode t)
  (defengine duckduckgo
    "https://duckduckgo.com/?q=%s"
    :keybinding "d")
  (defengine google
    "http://www.google.com/search?ie=utf-8&oe=utf-8&q=%s"
    :keybinding "g"))

(use-package google-this :config (google-this-mode 1))

(setq isearch-allow-scroll t
      isearch-wrap-pause 'no-ding)

(defadvice isearch-update (before my-isearch-reposite activate)
  (sit-for 0)
  (recenter 1))

;; anzu-mode enhances isearch & query-replace by showing total matches and
;; current match position
(use-package anzu
  :diminish anzu-mode
  :config (global-anzu-mode)
  :bind (("M-%" . anzu-query-replace)
         ("C-M-%" . anzu-query-replace-regexp)))
#+end_src

* Snippets

#+begin_src emacs-lisp
(setq-default abbrev-mode 1)

(use-package yasnippet
  :hook (after-init . yas-global-mode)
  :diminish yas
  :bind
  (:map yas-minor-mode-map
        ("C-c & t" . yas-describe-tables)
        ("C-c & &" . org-mark-ring-goto)))

(use-package yasnippet-snippets :defer)
#+end_src

* Spell checking

#+begin_src emacs-lisp
(add-hook 'text-mode-hook 'flyspell-mode)
(add-hook 'prog-mode-hook 'flyspell-prog-mode)
#+end_src

* Thesaurus

#+begin_src emacs-lisp
(use-package define-word
  :config
  (setq define-word-default-service 'wordnik)
  (defun url-http-user-agent-string ()
  "User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/47.0.2526.80 Safari/537.36
"))

(defun cunene/define-word (&rest args)
  "Create a buffer for display word instead of using messages."
  (interactive)
  (let
      ((buffer (get-buffer-create "Define Word")))
    (set-buffer buffer)
    (erase-buffer)
    (set-buffer-major-mode buffer)
    (apply 'insert args)
    (display-buffer buffer)))

(setq define-word-displayfn-alist
      (cl-loop for (service . _) in define-word-services
               collect (cons service #'cunene/define-word)))
#+end_src

* Logs

| logview | https://github.com/doublep/logview |

#+begin_src emacs-lisp
(use-package logview
  :config
  (setq logview-cache-filename (cunene/cache-concat "logview/logview-cache.extmap"))
  (setq logview-additional-submodes
        '(("dogen"
           (format . "TIMESTAMP [LEVEL] [NAME]")
           (levels . "SLF4J")
           (timestamp "ISO 8601 datetime + micros")))))
#+end_src

* Workspaces

| eyebrowse | https://depp.brause.cc/eyebrowse |

#+begin_src emacs-lisp
(use-package eyebrowse
  :config
  (setq eyebrowse-new-workspace t)
  ;; also save side and slot windows configuration.
  (add-to-list 'window-persistent-parameters '(window-side . writable))
  (add-to-list 'window-persistent-parameters '(window-slot . writable))
  (eyebrowse-mode t))
#+end_src

* Switching

| ace-window | https://github.com/abo-abo/ace-window |

#+begin_src emacs-lisp
(use-package ace-window
  :config
  (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
  (custom-set-faces
   '(aw-leading-char-face
     ((t (:inherit ace-jump-face-foreground :height 5.0)))))
  :bind
  ("M-o" . ace-window))

;; Window switching. (C-x o goes to the next window)
(global-set-key (kbd "C-x O") (lambda ()
                                (interactive)
                                (other-window -1))) ;; back one
#+end_src

* Diffing

| =ztree=         | https://github.com/fourier/ztree                  |
| =diff-at-point= | https://gitlab.com/ideasman42/emacs-diff-at-point |

#+begin_quote
ztree-diff

ztree-diff is a directory-diff tool for Emacs inspired by commercial tools like
Beyond Compare or Araxis Merge. It supports showing the difference between two
directories; calling Ediff for not matching files, copying between directories,
deleting file/directories, hiding/showing equal files/directories.
#+end_quote

#+begin_src emacs-lisp
(use-package ztree :ensure t)
(use-package diff-at-point :ensure t)

(add-hook
 'diff-mode-hook
 (lambda ()
   (define-key diff-mode-shared-map (kbd "<C-M-return>")
               'diff-at-point-goto-source-and-close)))

(add-hook
 'prog-mode-hook
 (lambda ()
   (define-key prog-mode-map (kbd "<C-M-return>")
               'diff-at-point-open-and-goto-hunk)))

;; ediff
(setq ediff-window-setup-function 'ediff-setup-windows-plain
      ediff-split-window-function 'split-window-horizontally
      ediff-diff-options "-w")

(defvar cunene/ediff-do-hexl-diff nil
  "variable used to store trigger for doing diff in hexl-mode")

(defadvice ediff-files-internal
  (around ediff-files-internal-for-binary-files activate)
  "catch the condition when the binary files differ the reason
for catching the error out here (when re-thrown from the inner
advice) is to let the stack continue to unwind before we start
the new diff otherwise some code in the middle of the stack
expects some output that isn't there and triggers an error"
  (let ((file-A (ad-get-arg 0))
        (file-B (ad-get-arg 1))
        cunene/ediff-do-hexl-diff)
    (condition-case err
        (progn
          ad-do-it)
      (error
       (if cunene/ediff-do-hexl-diff
           (let ((buf-A (find-file-noselect file-A))
                 (buf-B (find-file-noselect file-B)))
             (with-current-buffer buf-A
               (hexl-mode 1))
             (with-current-buffer buf-B
               (hexl-mode 1))
             (ediff-buffers buf-A buf-B))
         (error (error-message-string err)))))))

(defadvice ediff-setup-diff-regions
  (around ediff-setup-diff-regions-for-binary-files activate)
  "when binary files differ, set the variable "
  (condition-case err
      (progn
        ad-do-it)
    (error
     (setq cunene/ediff-do-hexl-diff
           (and (string-match-p "^Errors in diff output.  Diff output is in.*"
                                (error-message-string err))
                (string-match-p "^\\(Binary \\)?[fF]iles .* and .* differ"
                                (buffer-substring-no-properties
                                 (line-beginning-position)
                                 (line-end-position)))))
     (error (error-message-string err)))))
#+end_src

* IRC

#+begin_src emacs-lisp
(setq erc-join-buffer 'bury)
(add-hook 'erc-mode-hook (lambda () (erc-fill-mode nil)))
#+end_src

* Mastodon

#+begin_src emacs-lisp
(use-package mastodon
  :config
  (setq mastodon-active-user "MarcoCraveiro")
  (setq mastodon-instance-url "https://emacs.ch"))
#+end_src

* Postamble

#+begin_src emacs-lisp
;;; features.el ends here
#+end_src
