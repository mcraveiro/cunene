:PROPERTIES:
:ID: 6A53FD28-BBD1-1804-7233-027439130AF1
:END:
#+title: Development
#+author: Marco Craveiro
#+options: <:nil c:nil todo:nil ^:nil d:nil date:nil author:nil toc:nil html-postamble:nil

Configuration related to programming.

* Preamble

#+begin_src emacs-lisp
;;; core.el  --- Cunene: My emacs configuration. -*- lexical-binding: t -*-
;; Author: Marco Craveiro <marco_craveiro@gmail.com> URL:
;; https://github.com/mcraveiro/prelude Version: 0.0.3 Keywords: convenience

;; This file is not part of GNU Emacs.

;;; Commentary:

;; General editor configuration

;;; License:

;; This program is free software; you can redistribute it and/or
;; modify it under the terms of the GNU General Public License
;; as published by the Free Software Foundation; either version 3
;; of the License, or (at your option) any later version.
;;
;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.
;;
;; You should have received a copy of the GNU General Public License
;; along with GNU Emacs; see the file COPYING.  If not, write to the
;; Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
;; Boston, MA 02110-1301, USA.

;;; Code:
#+end_src

* Version Control
  :PROPERTIES:
  :ID: 359E0F4C-C624-4FF4-A9B3-605A9A59013F
  :END:

| =git-commit=         | https://github.com/magit/magit/blob/master/lisp/git-commit.el |
| =git-gutter-fringe=  | https://github.com/emacsorphanage/git-gutter-fringe           |
| =gitattributes-mode= | https://github.com/magit/git-modes#gitattributes-mode         |
| =gitconfig-mode=     | https://github.com/magit/git-modes#gitconfig-mode             |
| =gitignore-mode=     | https://github.com/magit/git-modes#gitignore-mode             |
| =magit=              | https://github.com/magit/magit                                |
| =pinentry=           | https://elpa.gnu.org/packages/pinentry.html                   |
| =transient=          | https://github.com/magit/transient                            |
| =git-messenger=      | https://github.com/emacsorphanage/git-messenger               |


Git modes.

#+begin_src emacs-lisp
(use-package git-modes)
#+end_src

Auto-fill commit messages.

#+begin_src emacs-lisp
(use-package git-commit
  :hook
  (git-commit-mode . (lambda () (setq-local fill-column 72))))
#+end_src

Display indicators in the left fringe for Git changes.

#+begin_src emacs-lisp
(use-package git-gutter-fringe
  :preface
  (defun cunene/git-gutter-enable ()
    (when-let* ((buffer (buffer-file-name))
                (backend (vc-backend buffer)))
      (require 'git-gutter)
      (require 'git-gutter-fringe)
      (git-gutter-mode 1)))
  :hook
  (after-change-major-mode . cunene/git-gutter-enable)
  :config
  (define-fringe-bitmap 'git-gutter-fr:added [255] nil nil '(center t))
  (define-fringe-bitmap 'git-gutter-fr:deleted [255 255 255 255] nil nil 'bottom)
  (define-fringe-bitmap 'git-gutter-fr:modified [255] nil nil '(center t)))

(use-package git-messenger
  :bind ("C-x G" . git-messenger:popup-message)
  :config
  (setq git-messenger:show-detail t
        git-messenger:use-magit-popup t))
#+end_src

Major modes for Git-specific files.

#+begin_src emacs-lisp
;; (use-package gitattributes-mode)
;; (use-package gitconfig-mode)
;; (use-package gitignore-mode)
#+end_src

Magit provides Git facilities directly from within Emacs.

#+begin_quote
Magit is an interface to the version control system Git, implemented as an Emacs
package. Magit aspires to be a complete Git porcelain. While we cannot (yet)
claim that Magit wraps and improves upon each and every Git command, it is
complete enough to allow even experienced Git users to perform almost all of
their daily version control tasks directly from within Emacs. While many fine
Git clients exist, only Magit and Git itself deserve to be called porcelains.

--- Jonas Bernoulli
#+end_quote

#+begin_src emacs-lisp
(use-package magit
  :bind
  (:map magit-file-section-map
   ("<return>" . magit-diff-visit-file-other-window)
   :map magit-hunk-section-map
   ("<return>" . magit-diff-visit-file-other-window)
   :map magit-status-mode-map
   ("M-1" . nil)
   ("M-2" . nil)
   ("M-3" . nil)
   ("M-4" . nil))
  :hook
  (magit-post-stage-hook . cunene/magit-recenter)
  :config
  (setq epg-pinentry-mode 'loopback
        magit-commit-ask-to-stage 'stage ;; do not ask to stage
        magit-display-buffer-function 'magit-display-buffer-same-window-except-diff-v1
        magit-diff-highlight-hunk-region-functions
        '(magit-diff-highlight-hunk-region-using-face)
        magit-diff-refine-hunk 'all
        magit-module-sections-nested nil
        magit-section-initial-visibility-alist
        '((modules . show) (stashes . show) (unpulled . show) (unpushed . show)))
  (add-to-list 'magit-no-confirm 'stage-all-changes)
  (add-to-list 'magit-no-confirm 'unstage-all-changes)
  (magit-add-section-hook
   'magit-status-sections-hook 'magit-insert-modules-overview 'magit-insert-merge-log)
  (magit-add-section-hook 'magit-status-sections-hook
                          'magit-insert-assume-unchanged-files nil t)
  ;; insert the hidden files section in the magit status buffer.
  (magit-add-section-hook 'magit-status-sections-hook
                          'magit-insert-skip-worktree-files nil t)
  (remove-hook 'magit-section-highlight-hook #'magit-section-highlight)
  (remove-hook 'server-switch-hook 'magit-commit-diff)
  (remove-hook 'with-editor-filter-visit-hook 'magit-commit-diff))

(use-package git-timemachine)

(defun cunene/magit-create-feature-branch (branch-name)
  "Create a new feature branch from BRANCH-NAME and push to origin.
Spaces in BRANCH-NAME are converted to underscores and prefixed with 'feature/'.
Uses 'main' as the default base branch. Stashes any uncommitted changes temporarily."
  (interactive "sEnter branch name (spaces will become underscores): ")
  (let* ((clean-name (downcase (replace-regexp-in-string " " "_" branch-name)))
         (feature-branch (concat "feature/" clean-name))
         (default-branch (or (and (magit-rev-verify "main") "main") "master"))
         (had-uncommitted-changes (magit-anything-modified-p))
         (stash-name (format "WIP before creating %s" feature-branch)))

    ;; Check for uncommitted changes and stash if needed
    (when had-uncommitted-changes
      (message "Stashing uncommitted changes...")
      (magit-stash-both stash-name))

    (unwind-protect
        (progn
          ;; Checkout the default branch
          (message "checkout %s" default-branch)
          (magit-checkout default-branch)
          ;; Pull latest changes
          (message "pull latest")
          (magit-pull-from-upstream nil)
          ;; Create and checkout new feature branch
          (message "create new branch and checkout")
          (magit-branch-and-checkout feature-branch default-branch)
          ;; Push to origin with tracking
          (message "push to origin new")
          (magit-git-push feature-branch (format "origin/%s" feature-branch) '("--set-upstream"))
          (message "Created and pushed feature branch: %s (based on %s)" feature-branch default-branch))

      ;; Restore stashed changes if we stashed anything
      (when had-uncommitted-changes
        (message "Restoring stashed changes...")
        (let ((stash-ref (car (magit-list-stashes))))
          (when stash-ref
            (magit-stash-apply stash-ref)
            (magit-stash-drop stash-ref))))
      )))

#+end_src

#+begin_src emacs-lisp
(defun cunene/magit-recenter ()
  "Recenter the current hunk at 25% from the top of the window."
  (when (magit-section-match 'hunk)
    (let ((top (max 0 scroll-margin (truncate (/ (window-body-height) 4)))))
      (message "%s" top)
      (save-excursion
        (magit-section-goto (magit-current-section))
        (recenter top)))))
#+end_src

Start =pinentry= in order for Emacs to be able to prompt for passphrases when
necessary.

Transient is the package behind the modal maps and prefixes depicted in Magit.
It is currently used by Magit only in my configuration so it will stay in this
section for now.

#+begin_src emacs-lisp
(setq-default
 transient-history-file (cunene/cache-concat "transient/history.el")
 transient-levels-file (cunene/cache-concat "transient/levels.el")
 transient-values-file (cunene/cache-concat "transient/values.el"))

(use-package transient
  :init
  :config
  (setq transient-default-level 5)
  (setq transient-mode-line-format nil))
#+end_src

Automatically detect the need for smerge.

#+begin_src emacs-lisp
(use-package smerge-mode
  :commands smerge-mode
  :bind ("C-c '" . hydra-hsmerge/body)
  :init
  (defun cunene/maybe-enable-smerge ()
    (save-excursion
      (goto-char (point-min))
      (when (re-search-forward "^<<<<<<< " nil t)
        (smerge-mode 1))))
  (add-hook 'find-file-hook 'cunene/maybe-enable-smerge)
  (add-hook 'after-revert-hook 'cunene/maybe-enable-smerge)

  :config
  (defhydra hydra-smerge (:hint nil
                          :pre (smerge-mode 1)
                          :post (smerge-auto-leave))
    "
^Move^       ^Keep^               ^Diff^                 ^Other^
^^-----------^^-------------------^^---------------------^^-------
_n_ext       _b_ase               _<_: upper/base        _C_ombine
_p_rev       _u_pper (mine)       _=_: upper/lower       _r_esolve
^^           _l_ower (other)      _>_: base/lower        _k_ill current
^^           _a_ll                _R_efine
^^           _RET_: current       _E_diff
"
      ("n" smerge-next)
      ("p" smerge-prev)
      ("b" smerge-keep-base)
      ("u" smerge-keep-upper)
      ("l" smerge-keep-lower)
      ("a" smerge-keep-all)
      ("RET" smerge-keep-current)
      ("\C-m" smerge-keep-current)
      ("<" smerge-diff-base-upper)
      ("=" smerge-diff-upper-lower)
      (">" smerge-diff-base-lower)
      ("R" smerge-refine)
      ("E" smerge-ediff)
      ("C" smerge-combine-with-next)
      ("r" smerge-resolve)
      ("k" smerge-kill-current)
      ("q" nil "cancel" :color blue)))
#+end_src

* Project Management
  :PROPERTIES:
  :ID: ED77C960-46A7-EBF4-ECA3-9072AD8F2A86
  :END:

#+begin_src emacs-lisp
(use-package project)
#+end_src

* Syntax Checking
  :PROPERTIES:
  :ID: 33CE11A4-5DFF-4094-54A3-EF53C3944A3F
  :END:

#+begin_src emacs-lisp
(use-package flycheck :init (global-flycheck-mode))

(add-to-list 'display-buffer-alist
             `(,(rx bos "*Flycheck errors*" eos)
               (display-buffer-reuse-window
                display-buffer-in-side-window)
               (reusable-frames . visible)
               (side            . bottom)
               (window-height   . 0.2)))
#+end_src

* Syntax Highlighting
  :PROPERTIES:
  :ID: 8E974461-5B8B-D9F4-BADB-C18A176F36BE
  :END:

#+begin_src emacs-lisp
(use-package color-identifiers-mode
  :commands color-identifiers-mode
  :config
  (add-to-list 'color-identifiers:modes-alist
               '(csharp-mode "" "\\_<\\([a-zA-Z_$]\\(?:\\s_\\|\\sw\\)*\\)"
                             (nil font-lock-variable-name-face tree-sitter-hl-face:variable)))
  (add-to-list 'color-identifiers:modes-alist
               '(csharp-ts-mode "" "\\_<\\([a-zA-Z_$]\\(?:\\s_\\|\\sw\\)*\\)"
                                (nil font-lock-variable-name-face tree-sitter-hl-face:variable)))
  (add-hook 'prog-mode-hook 'color-identifiers-mode))
#+end_src

* Eglot
  :PROPERTIES:
  :ID: 49C4B4A5-DA01-FC14-6743-DEA942D98798
  :END:

| eglot         | https://github.com/joaotavora/eglot      |
| consult-eglot | https://github.com/mohkale/consult-eglot |

#+begin_src emacs-lisp
(use-package eglot
  :bind (("M-RET" . eglot-code-actions)))
(use-package
  flycheck-eglot
  :init
  (global-flycheck-eglot-mode))
(use-package consult-eglot)

(use-package imenu-list
  :config
  (setq imenu-list-auto-resize t)

  (add-hook 'imenu-list-major-mode-hook
            (lambda ()
              (imenu-list-minor-mode)
              (read-only-mode)
              (hl-line-mode))))

(defun cunene/path-to-omnisharp ()
  "Returns the path to the LSP server for C#."
  (if (eq window-system 'w32)
      "c:/opt/omnisharp-roslyn/latest/omnisharp-roslyn/OmniSharp.exe"
    "/home/marco/local/omnisharp/OmniSharp"))

(add-to-list 'eglot-server-programs
             `((csharp-mode csharp-ts-mode) . (,(cunene/path-to-omnisharp) "-lsp")))

;;
;; Improve performance by not logging debug info.
;; https://www.reddit.com/r/emacs/comments/1447fy2/looking_for_help_in_improving_typescript_eglot/
;;
; (fset #'jsonrpc--log-event #'ignore)
#+end_src

* Diagrams
  :PROPERTIES:
  :ID: 41694A0E-457F-9384-F0C3-BE49E3737ED3
  :END:

#+begin_src emacs-lisp
(use-package plantuml-mode
  :mode "\\.plantuml\\'"
  :config
  (setq plantuml-indent-level 4)
  (add-to-list 'plantuml-java-args "-DPLANTUML_LIMIT_SIZE=16384")
  (add-to-list 'plantuml-java-args "-DPLANTUML_SECURITY_PROFILE=UNSECURE")
  (setq plantuml-jar-output-type-opt "png")
  (add-hook 'plantuml-mode-hook 'whitespace-mode)
  ;; (add-to-list 'plantuml-jar-args "-Playout=elk")
  (add-to-list 'plantuml-jar-args "-v")

  (if (eq system-type 'windows-nt)
      (setq plantuml-jar-path "C:/opt/plantuml/plantuml.jar"
            plantuml-default-exec-mode 'jar)
    (setq plantuml-jar-path "/usr/share/plantuml/plantuml.jar"
          plantuml-default-exec-mode 'executable))
  (setq org-plantuml-jar-path plantuml-jar-path))

(require 'plantuml-mode)
(defun cunene/plantuml-make-diagram ()
  "Create a diagram from a PlantUML buffer."
  (interactive)
  (let* ((plantuml-diagram (buffer-file-name))
         (process-query-on-exit-flag nil)
         (plantuml-buffer-name
          (concat "PlantUML: " (file-name-nondirectory plantuml-diagram))))
    (with-current-buffer (get-buffer-create plantuml-buffer-name)
      (erase-buffer)
      (goto-char (point-max))
      (insert "Starting PlantUML "(format-time-string "%D %-I:%M %p")))
    (display-buffer plantuml-buffer-name)
    (clear-image-cache)
    ;; copied from plantuml-jar-start-process, which uses stdin (e.g. -p)
    (apply #'start-process
           "PLANTUML" plantuml-buffer-name plantuml-java-command
           `(,@plantuml-java-args
             ,plantuml-jar-path
             ,(plantuml-jar-output-type-opt plantuml-jar-output-type-opt)
             ,@plantuml-jar-args
             ,plantuml-diagram))))

(use-package flycheck-plantuml
  :ensure t
  :after (plantuml-mode flycheck)
  :init (flycheck-plantuml-setup))

(with-eval-after-load "org"
  (add-to-list 'org-src-lang-modes '("plantuml" . plantuml)))

(add-to-list 'auto-mode-alist '("\\.puml\\'" . plantuml-mode))

#+end_src

* Parenthesis
  :PROPERTIES:
  :ID: 3ED3D8BE-A972-EDD4-2163-8312C780473A
  :END:

#+begin_src emacs-lisp
(show-paren-mode 1)

(use-package rainbow-delimiters
  :hook ((prog-mode org-mode) . rainbow-mode)
  :config
  (add-hook 'prog-mode-hook 'rainbow-delimiters-mode))

(use-package smartparens
  :diminish
  :init
  (show-smartparens-global-mode +1)
  :config
  (setq sp-autoskip-closing-pair 'always))

(use-package rainbow-mode
  :config
  (setq rainbow-x-colors nil))
#+end_src

* Indentation
  :PROPERTIES:
  :ID: 522E6AEA-EB77-A634-9C3B-DEEFFE9A63E7
  :END:

#+begin_src emacs-lisp
(use-package aggressive-indent)

(defun cunene/indent-buffer ()
  "Indent entire buffer"
  (interactive)
  (indent-region (point-min) (point-max)))
#+end_src

* Deletion
  :PROPERTIES:
  :ID: A9CE6C54-365F-90C4-E0AB-8ED155D5FDE4
  :END:

| =smart-hungry-delete= | https://github.com/hrehfeld/emacs-smart-hungry-delete |

#+begin_quote
Delete whitespace between words, parenthesis and other delimiters in a smart (dumb) way.
#+end_quote

#+begin_src emacs-lisp
(use-package smart-hungry-delete
  :bind (("<backspace>" . smart-hungry-delete-backward-char)
         ("<deletechar>" . smart-hungry-delete-forward-char))
  :defer nil ;; dont defer so we can add our functions to hooks
  :config (smart-hungry-delete-add-default-hooks))

;; replace zap-to-char functionality with the more powerful zop-to-char
(global-set-key (kbd "M-z") 'zop-up-to-char)
(global-set-key (kbd "M-Z") 'zop-to-char)

;; kill lines backward
(global-set-key (kbd "C-<backspace>") (lambda ()
                                        (interactive)
                                        (kill-line 0)
                                        (indent-according-to-mode)))

(global-set-key [remap kill-whole-line] 'crux-kill-whole-line)
#+end_src

* Code Folding
  :PROPERTIES:
  :ID: 35652DDD-57E8-1E44-43CB-3EA7BD2677C3
  :END:

| =hideshow= | [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Hideshow.html][built-in]] |

#+begin_src emacs-lisp
(require 'hideshow)

;; Hide the comments too when you do a 'hs-hide-all'
(setq hs-hide-comments nil)

;; Set whether isearch opens folded comments, code, or both
;; where x is code, comments, t (both), or nil (neither)
(setq hs-isearch-open 't)

(setq hs-set-up-overlay
      (defun cunene/display-code-line-counts (ov)
        (when (eq 'code (overlay-get ov 'hs))
          (overlay-put ov 'display
                       (propertize
                        (format " ... <%d>"
                                (count-lines (overlay-start ov)
                                             (overlay-end ov)))
                        'face 'font-lock-type-face)))))
(add-hook 'prog-mode-hook #'hs-minor-mode)
(require 'hideshow)
#+end_src

* XML
  :PROPERTIES:
  :ID: 74D08CB2-AD6A-A924-989B-056790EFDF35
  :END:

#+begin_src emacs-lisp
;; https://emacs.stackexchange.com/questions/2884/the-old-how-to-fold-xml-question
(require 'sgml-mode)
(require 'nxml-mode)

(add-to-list 'hs-special-modes-alist
             '(nxml-mode
               "<!--\\|<[^/>]*[^/]>"
               "-->\\|</[^/>]*[^/]>"

               "<!--"
               sgml-skip-tag-forward
               nil))

(add-hook 'nxml-mode-hook 'hs-minor-mode)
(global-set-key (kbd "C-<tab>") 'hs-toggle-hiding)

(defun cunene/escape-unindent-xml (start end)
  "Convert XML into a single line, removing line breaks, etc and escape quotes.
START and END mark the region."
  (interactive "r")
  (let
      ((buffer (get-buffer-create "*decoded-content*"))
       (pipeline "xmllint -exc-c14n --no-blanks - | sed 's/\"/\\\"/g'"))
    (shell-command-on-region start end pipeline buffer)
    (set-buffer buffer)
    (switch-to-buffer-other-window buffer)))

(defun cunene/unescape-indent-xml (start end)
  "Convert escaped XML into indented XML.
START and END mark the region."
  (interactive "r")
  (let*
      ((original-contents (buffer-substring (+ start 1) (- end 1)))
       (fixed-new-lines (replace-regexp-in-string "\\\\n" "" original-contents))
       (fixed-quotes (replace-regexp-in-string "\\\\\\(.\\|\n\\)" "\\1" fixed-new-lines))
       (buffer (get-buffer-create "*formatted-content*"))
       (pipeline "xmllint.exe --format -"))
    (set-buffer buffer)
    (erase-buffer)
    (insert fixed-quotes)
    (shell-command-on-region (point-min) (point-max) pipeline buffer)
    (xml-mode)
    (switch-to-buffer-other-window buffer))
  )

(defun cunene/decode-xml (start end)
  "Base64 decodes the region and unzips it, generating an XML buffer.
START and END mark the region."
  (interactive "r")
  (let
      ((buffer (get-buffer-create "*decoded-content*"))
       (pipeline "base64 -d | openssl zlib -d | xmllint.exe --format -"))
    (shell-command-on-region start end pipeline buffer)
    (set-buffer buffer)
    (xml-mode)
    (switch-to-buffer-other-window buffer)))

(defun cunene/decode (start end)
  "Base64 decodes the region and unzips it.
START and END mark the region."
  (interactive "r")
  (let
      ((buffer (get-buffer-create "*decoded-content*"))
       (pipeline "base64 -d | openssl zlib -d"))
    (shell-command-on-region start end pipeline buffer)
    (set-buffer buffer)
    (switch-to-buffer-other-window buffer)))

#+end_src

* FV
  :PROPERTIES:
  :ID: 7655EDEA-F434-4FB4-D49B-9699119EA331
  :END:

#+begin_src emacs-lisp
(use-package fv-mode
  :load-path cunene/vendor-packages)

(defun cunene/decode-fv (start end)
  "Base64 decodes the region and unzips it, generating an FV buffer.
START and END mark the region."
  (interactive "r")
  (let
      ((buffer (get-buffer-create "*decoded-content*"))
       (pipeline "base64 -d | openssl zlib -d"))
    (shell-command-on-region start end pipeline buffer)
    (set-buffer buffer)
    (fv-mode)
    (switch-to-buffer-other-window buffer)))

(defun cunene/indent-escape-fv (start end)
  "Convert escaped XML into indented FV.
START and END mark the region."
  (interactive "r")
  (let*
      ((original-contents (buffer-substring (+ start 1) (- end 1)))
       (fixed-new-lines (replace-regexp-in-string "\\\\n" "" original-contents))
       (fixed-quotes (replace-regexp-in-string "\\\\\\(.\\|\n\\)" "\\1" fixed-new-lines))
       (buffer (get-buffer-create "*formatted-content*")))
    (set-buffer buffer)
    (erase-buffer)
    (insert fixed-quotes)
    (fv-mode)
    (switch-to-buffer-other-window buffer))
  )
#+end_src

* Json
  :PROPERTIES:
  :ID: CF91D5F1-ECEA-3CF4-2C0B-BE8E94B5F0D7
  :END:

| =jq-format= | https://github.com/wbolster/emacs-jq-format |
| =jq-mode=   | https://github.com/ljos/jq-mode             |
|

#+begin_src emacs-lisp
(use-package json-mode)
(use-package jq-mode)
(with-eval-after-load "json-mode"
  (define-key json-mode-map (kbd "C-c C-j") #'jq-interactively))

;; Format JSON / JSONlines with JQ
(use-package jq-format)

;; (use-package hierarchy
;;   :ensure t)

;; (use-package json-navigator
;;   :ensure t)
#+end_src

#+begin_src emacs-lisp
(defun cunene/indent-json (start end)
  "Indent region as JSON.
START and END mark the region."
  (interactive "r")
  (let
      ((buffer (get-buffer-create "*formatted-content*"))
       (pipeline "jq ."))
    (shell-command-on-region start end pipeline buffer)
    (set-buffer buffer)
    (json-mode)
    (switch-to-buffer-other-window buffer)
    )
)

(defun cunene/unescape-indent-json (start end)
  "Convert escaped JSON into indented JSON.
START and END mark the region."
  (interactive "r")
  (let*
      ((original-contents (buffer-substring (+ start 1) (- end 1)))
       (fixed-new-lines (replace-regexp-in-string "\\\\n" "" original-contents))
       (fixed-quotes (replace-regexp-in-string "\\\\\\(.\\|\n\\)" "\\1" fixed-new-lines))
       (buffer (get-buffer-create "*formatted-content*"))
       (pipeline "jq ."))
    (set-buffer buffer)
    (erase-buffer)
    (insert fixed-quotes)
    (shell-command-on-region (point-min) (point-max) pipeline buffer)
    (json-mode)
    (switch-to-buffer-other-window buffer))
  )

#+end_src

* Markup
  :PROPERTIES:
  :ID: 8FC0E36E-258F-DF14-6A9B-420409877A8B
  :END:

#+begin_src emacs-lisp
(use-package markdown-mode
  :ensure t
  :bind (("C-c C-s a" . markdown-table-align))
  :mode ("\\.md$" . gfm-mode))
#+end_src

** REST

#+begin_src emacs-lisp
(use-package verb
  :mode ("\\.org\\'" . org-mode)
  :config (define-key org-mode-map (kbd "C-c C-r") verb-command-map)
)

(use-package swagger-to-org)
(use-package swagg)

#+end_src

* C/C++
  :PROPERTIES:
  :ID: 88FD9DBC-0949-AC64-E683-3FD8B62D27A0
  :END:

#+begin_src emacs-lisp
;; Default these extensions to c++ mode
(add-to-list 'auto-mode-alist '("\\.h\\'" . c++-mode))
(add-to-list 'auto-mode-alist '("\\.ipp\\'" . c++-mode))

(add-hook 'c-mode-common-hook
          (lambda ()
            (c-set-offset 'innamespace 0) ;; Do not indent namespaces.
            (c-set-offset 'arglist-intro '+) ;; indent function args properly
            (c-set-offset 'arglist-cont-nonempty '+)
            (c-toggle-hungry-state 1)          ;; use hungry delete.
            (auto-fill-mode 1)                 ;; auto fill comments
            (setq c-basic-offset tab-width)
            (setq c-default-style "stroustrup")))

;; Key bindings
(eval-after-load 'cc-mode
  '(progn
     ;; Ident when moving to a new line
     (define-key c-mode-map (kbd "RET") 'reindent-then-newline-and-indent)
     ))

(use-package cmake-mode)
#+end_src

* Statistics

#+begin_src emacs-lisp
(use-package ess)
#+end_src


* C#
  :PROPERTIES:
  :ID: C1FF33A7-84FB-6754-81F3-15492FEF9114
  :END:

#+begin_src emacs-lisp


;; (defun cunene/csharp-ts-indent-style()
;;   "Override the built-in indentation style with some additional rules"
;;   `(
;;     ;; align function arguments to the start of the first one, offset if standalone
;;     ((match nil "argument_list" nil 1 1) parent-bol c-ts-mode-indent-offset)
;;     ((parent-is "argument_list") (nth-sibling 1) 0)
;;     ;; same for parameters
;;     ((match nil "parameter_list" nil 1 1) parent-bol c-ts-mode-indent-offset)
;;     ((parent-is "parameter_list") (nth-sibling 1) 0)
;;     ;; indent inside case blocks
;;     ((parent-is "case_statement") standalone-parent c-ts-mode-indent-offset)
;;     ;; do not indent preprocessor statements
;;     ((node-is "preproc") column-0 0)
;;     ;; append to bsd style
;;     ,@(alist-get 'bsd (csharp-ts-mode--indent-styles 'cpp))))
;; (setq c-ts-mode-indent-style #'fa/c-ts-indent-style)

(use-package csharp-mode
  :config
  (defun cunene/csharp-mode-setup ()
    (flycheck-mode)
    (c-toggle-hungry-state 1)
    (setq indent-tabs-mode nil)
    (setq c-syntactic-indentation t)
    (c-set-style "ellemtel")
    (setq c-basic-offset 4)
    (setq truncate-lines t)
    (setq tab-width 4)
    (setq evil-shift-width 4))
  (add-hook 'csharp-mode-hook 'cunene/csharp-mode-setup t))

(add-to-list 'major-mode-remap-alist '(csharp-mode . csharp-ts-mode))

(add-hook 'csharp-ts-mode-hook
          (lambda ()
            (setq csharp-ts-mode--indent-rules
                  `((c-sharp
                     ,@(alist-get 'c-sharp csharp-ts-mode--indent-rules)
                     ((parent-is "parameter_list") first-sibling 1)
                     ((parent-is "member_access_expression") parent-bol csharp-ts-mode-indent-offset))))))


(defun csharp-hs-forward-sexp (&optional arg)
  "I set hs-forward-sexp-func to this function.

I found this customization necessary to do the hide/show magic in C#
code, when dealing with region/endregion. This routine
goes forward one s-expression, whether it is defined by curly braces
or region/endregion. It handles nesting, too.

The forward-sexp method takes an arg which can be negative, which
indicates the move should be backward.  Therefore, to be fully
correct this function should also handle a negative arg. However,
the hideshow.el package never uses negative args to its
hs-forward-sexp-func, so it doesn't matter that this function does not
do negative numbers.

The arg can also be greater than 1, which means go forward
multiple times. This function doesn't handle that EITHER.  But
again, I haven't see that as a problem."

  (message "csharp-hs-forward-sexp, (arg %d) (point %d)..."
           (if (numberp arg) arg -1)
           (point))

  (let ((nestlevel 0)
        (mark1 (point))
        (done nil)
        )

    (if (and arg (< arg 0))
        (message "negative arg (%d) is not supported..." arg)

      ;; else, we have a positive argument, hence move forward.
      ;; simple case is just move forward one brace
      (if (looking-at "{")
          (forward-sexp arg)

        ; The more complex case is dealing with a "region/endregion" block.
        ; We have to deal with nested regions!
        (and
         (while (not done)
           (re-search-forward "^[ \\t]*#[ \\t]*\\(region\\|endregion\\)\\b"
                              (point-max) 'move)
           (cond

            ((eobp))                    ; do nothing if at end of buffer

            ((and
              (match-beginning 1)
              ;; if the match is longer than 6 chars, we know it is "endregion"
              (if (> (- (match-end 1) (match-beginning 1)) 6)
                  (setq nestlevel (1- nestlevel))
                (setq nestlevel (1+ nestlevel))
                )
              )))

           (setq done (not (and (> nestlevel 0) (not (eobp)))))

           )                            ; while

         (if (= nest 0)
             (goto-char (match-end 2)))

         )
        )
      )
    )
  )

(unless (assoc 'csharp-mode hs-special-modes-alist)
          (push '(csharp-mode
                  ; "\\(^\\s*#\\s*region\\b\\)\\|{"      ; regexp for start block DID NOT WORK
                  "\\(^[ \\t]*#[ \\t]*region\\b\\)\\|{"  ; regexp for start block

                  ; "\\(^\\s*#\\s*endregion\\b\\)\\|}"   ; regexp for end block NO WORKY!
                  "\\(^[ \\t]*#[ \\t]*endregion\\b\\)\\|}"   ; regexp for end block

                  "/[*/]"                                ; regexp for comment start

                  csharp-hs-forward-sexp                 ; hs-forward-sexp-func
                  hs-c-like-adjust-block-beginning       ;c-like adjust (1 char)
                  ;csharp-hs-adjust-block-beginning      ;csharp adjust ?
                  )
                hs-special-modes-alist)
          )

(use-package csproj-mode)
(use-package sln-mode
  :load-path cunene/vendor-packages)
(use-package sharper
  :demand t
  :config
  (add-to-list 'auto-mode-alist '("\\.sln\\'" . sln-mode))
  :bind
  ("C-c n" . sharper-main-transient))

(use-package web-mode
  :config
  (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.cshtml?\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.svelte?\\'" . web-mode))
  (setq web-mode-engines-alist
        '(("razor"    . "\\.cshtml\\'")
          ("blade"  . "\\.blade\\.")
          ("svelte" . "\\.svelte\\."))))
#+end_src

* Clojure
  :PROPERTIES:
  :ID: DB7838ED-D513-1414-89D3-E5499CDD9C37
  :END:

#+begin_src emacs-lisp
(use-package clojure-mode)
(use-package inf-clojure)
#+end_src

* Protobuf
  :PROPERTIES:
  :ID: 3D74984B-0203-9AB4-4C5B-9EDA961F98D9
  :END:

#+begin_src emacs-lisp
(use-package protobuf-mode)
#+end_src

* Terraform
  :PROPERTIES:
  :ID: 57EA2C89-A930-4D44-6E63-364304403913
  :END:

#+begin_src emacs-lisp
(use-package terraform-mode)
#+end_src

* Docker
  :PROPERTIES:
  :ID: 2228868C-C213-DB24-A263-7C382136FC1F
  :END:

| =dockerfile= | https://github.com/spotify/dockerfile-mode |
| =docker=     | https://github.com/Silex/docker.el         |

#+begin_src emacs-lisp
(use-package dockerfile-mode)

(use-package docker
  :ensure t
  :bind ("C-c d" . docker))
#+end_src


* Doxymacs
  :PROPERTIES:
  :ID: 9778C07A-37CD-7D04-14FB-9124E67DDBF1
  :END:

| =doxymacs= | https://github.com/gittiver/doxymacs |

TODO: for some reason we do not trigger the mode with =/**=, it seems to require
=/***=, which is not in accordance with [[https://www.doxygen.nl/manual/docblocks.html][doxygen syntax]].

#+begin_src emacs-lisp
(use-package doxymacs
  :load-path cunene/vendor-packages
  :config
  ;; syntax highlighting for doxygen keywords.
  (defun cunene/doxymacs-font-lock-hook ()
    (if (or (eq major-mode 'c-mode) (eq major-mode 'c++-mode))
        (doxymacs-font-lock)))
  (add-hook 'font-lock-mode-hook 'cunene/doxymacs-font-lock-hook)

  ;; start doxymacs mode in C/C++
  (add-hook 'c-mode-common-hook 'doxymacs-mode))
#+end_src

* Compilation
  :PROPERTIES:
  :ID: 424A04F9-974E-0174-BA9B-574C7D15A8CE
  :END:

#+begin_src emacs-lisp

(global-set-key (kbd "C-c c") 'compile)

;; automatically scroll the output
(setq compilation-scroll-output t)

;; reuse existing frame.
(setq display-buffer-reuse-frames t)

;; kill ongoing compilation
(setq compilation-always-kill  t)

;; save buffers whenc compiling without asking
(setq compilation-ask-about-save nil)

;; Compilation from Emacs. From prelude.
(defun cunene/colorize-compilation-buffer ()
  "Colorize a compilation mode buffer."
  (interactive)
  ;; we don't want to mess with child modes such as grep-mode, ack, ag, etc
  (when (eq major-mode 'compilation-mode)
    (let ((inhibit-read-only t))
      (ansi-color-apply-on-region (point-min) (point-max)))))

(require 'ansi-color)
(setq compilation-filter-hook nil)
;; (add-hook 'compilation-filter-hook #'cunene/colorize-compilation-buffer)

(defun cunene/recompile-quietly ()
  "Re-compile without changing the window configuration."
  (interactive)
  (save-window-excursion
    (recompile)))
#+end_src

* Lisp
  :PROPERTIES:
  :ID: 711A7A11-27A3-5074-1EFB-C81368C8F2E4
  :END:

| =persistent-scratch= | https://github.com/Fanael/persistent-scratch |

#+begin_src emacs-lisp
(use-package persistent-scratch
  :config
  (setq persistent-scratch-save-file
        (cunene/cache-concat "scratch/persistent-scratch"))
  (persistent-scratch-setup-default))
#+end_src

* Mustache
  :PROPERTIES:
  :ID: F5A8C2A2-3047-3E74-D0CB-5BFED679519B
  :END:

| =mustache= | https://github.com/mustache/emacs |

#+begin_src emacs-lisp
(use-package mustache-mode
  :ensure t)

(use-package mustache
  :ensure t
  :config)
#+end_src

* SQL
  :PROPERTIES:
  :ID: 5B99B5B1-FF92-D8A4-E7C3-D4DAAA9AF88D
  :END:

| =sql-clickhouse= | https://github.com/rschwarz/sql-clickhouse |

#+begin_src emacs-lisp
(use-package sql-clickhouse)
#+end_src

* Yaml
  :PROPERTIES:
  :ID: B3E43C09-4990-3BA4-3ABB-85CCD69BE163
  :END:

| =yaml-mode= | [[https://github.com/yoshiki/yaml-mode]] |

#+begin_src emacs-lisp
(use-package yaml-mode)
#+end_src

* CSV
  :PROPERTIES:
  :ID: 3E8F7DFC-EC7A-4364-400B-C8E43BA1499A
  :END:

#+begin_src emacs-lisp
(use-package csv-mode
  :hook
  (csv-mode . (lambda ()
                (csv-align-mode)
                (csv-header-line)
                (hl-line-mode)
                (read-only-mode))))
#+end_src

* GPT
  :PROPERTIES:
  :ID: 06E0D9BD-F1FE-7D24-1C23-1089728BA29A
  :END:

#+begin_src emacs-lisp
(use-package chatgpt-shell
  :custom
  ((chatgpt-shell-openai-key
    (lambda ()
      (auth-source-pick-first-password :host "api.openai.com")))))

(use-package llama-cpp)

(use-package ellama
  :init
  (setopt ellama-language "English")
  (require 'llm-ollama)
  (setopt ellama-providers
          '(("llama3" . (make-llm-ollama
                         :chat-model "llama3" :embedding-model "llama3"))
            ("phi3" . (make-llm-ollama
                         :chat-model "phi3" :embedding-model "phi3"))
            ("codellama" . (make-llm-ollama
                            :chat-model "codellama:7b" :embedding-model "codellama:7b"))
            ("codestral" . (make-llm-ollama
                            :chat-model "codestral:latest" :embedding-model "codestral:latest"))
            ("codeqwen" . (make-llm-ollama
                           :chat-model "codeqwen:latest" :embedding-model "codeqwen:latest"))
            ("gemma2" . (make-llm-ollama
                         :chat-model "gemma2" :embedding-model ":gemma2"))
            ("qwen2" . (make-llm-ollama
                         :chat-model "qwen2:latest" :embedding-model ":qwen2"))
            ("mistral" . (make-llm-ollama
                          :chat-model "mistral:latest" :embedding-model ":mistral"))
            ))
  )


(use-package claude-code :ensure t
  :vc (:url "https://github.com/stevemolitor/claude-code.el" :rev :newest)
  :config (claude-code-mode)
  :bind-keymap ("C-c c" . claude-code-command-map))
#+end_src

* Eldoc

#+begin_src emacs-lisp
(setq eldoc-echo-area-use-multiline-p nil)
(use-package eldoc-box)
#+end_src

* HA Proxy

| =haproxy-mode= | https://github.com/port19x/haproxy-mode |

#+begin_src emacs-lisp
(use-package haproxy-mode)
#+end_src

* Postamble

#+begin_src emacs-lisp
;;; core.el ends here
#+end_src
